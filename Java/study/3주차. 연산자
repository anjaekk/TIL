## 연산자의 개념

연산자: 연산을 수행하는 기호

피연산자: 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

## Java 연산자

### Java 연산자의 종류

1. 산술 연산자(arithmetic operator)
2. 비교 연산자(comparison operator)
3. 논리 연산자(logical operator)
4. 대입 연산자(assignment operator)
5. 기타
    - 형변환 연산자
    - 삼항 연산자
    - instanceof 연산자

### 산술 변환

Java에서 연산 수향 직전에 발생하는 피연산자의 자동 형변환을 의미한다.

산술 변환은 아래의 두 규칙을 따른다.

1. 두 피연산자의 타입을 더 큰쪽 타입으로 일치 시킨다.
2. 피연산자의 타입이 int보다 작은 타입이면 int로 변환한다.

### 증감 연산자 ++ --

증감 연산자는 사용시 코드가 간결해 진다는 이점이 있지만 사용이 지나치면 오히려 가독성을 떨어뜨리고 코드의 복잡성이 올라가게 된다. 그러므로 하나의 식에서 증감 연산자의 사용을 최소화 하고 식에 두번이상 포함된 변수에 증감 연산자를 사용하는 것은 피해야 한다. 

[ 종류 ]

1. 증가연산자(++): 피연산자의 값 1 증가
2. 감소연산자(--): 피연산자의 값 1 감소

[ 타입 ]

1. 전위형: 값 참조 전 증가(감소)
    
    ```java
    int i = 5, j=0;
    j = ++i;
    System.out.println("i="+i+",j="+j); // i=6,j=5
    ```
    
2. 후위형: 값 참조 후 증가(감소)
    
    ```java
    int i = 5, j=0;
    j = i++;
    System.out.println("i="+i+",j="+j); // i=6,j=6
    ```
    
3. **독립적 사용일 경우 전위형과 후위형의 차이가 없다.**
    - i 값 1 증가
    
    ```java
    ++i;
    i++;
    ```
    

## 산술 연산자

나누기 연산자 특이사항

[ int / int = int이다. ]

- 두 피연산자가 모두 int 타입일 경우 연산 결과도 역시 int 타입이 되기 때문에 나머지는 버려지고 몫만 계산된다.
- 만약 나머지도 필요하다면 하나 이상의 피연산자를 float타입으로 변경 후 계산하면 결과는 float으로 나온다.

## 비트 연산자

파이썬에서 1=True, 0=Fasle라는 의미와는 다르게 정말 비트 단위로 계산을 할 때 사용한다고 생각하면 된다. (참, 거짓과는 관련 없음)

### 특징

- 비트 연산자는 피연산자를 비트단위로 논리 연산한다.
- 피연산자로 실수는 허용하지 않는다.

### 종류

|(or): 피연산자 중 한쪽 이상이 1이면 1, 그 외 0

&(and): 피연산자 모두 1일 때 1, 그 외 0

^(xor): 피연산자의 값이 서로 다를 때 1, 같으면 0

### 비트 전환 연산자 ~

피연산자를 2진수로 표현했을 때 0 → 1, 1 → 0으로 변경한다.

### 쉬프트 연산자 << >>

피연산자를 2진수로 표현했을 때 각자리를 <<(왼쪽), >>(오른쪽)으로 이동할때 사용하는 연산자이다. 

쉬프트 연산자는 곱셈이나 나눗셈을 써야할 때 사용할 수 있는데 곱하기와 나누기 연산자를 두고 쉬프트 연산자를 사용하는 이유는 성능면에서 우월하기 때문이다.

쉬프트 연산자의 예를 보면 다음 과 같다.

- x << n = x*2^n
    - 8 >> 2 = 8/4
- x >> n = x/2^n

## 관계 연산자

일반 부등호 및 등호

==

- 기본형에서는 값을 가지고 비교를 하게되고
- 참조형은 메모리 주소를 가지고 비교를 하게 된다. (그럼 equanls 메소드를 이용해 값을 비교할 수 있다.)

## 논리 연산자

### 종류

|| (or): 피연산자 중 한쪽 이상이 true일 때 true

&& (and): 피연산자 모두 true일 때 true

## 그외 연산자

### instanceof

- 객체 타입을 확인하는 연산자
- 형변환 가능 여부를 확인하며 true/false로 결과를 반환한다.
- 주로 상속 관계에서 부모객체인지 자식객체인지 확인하는데 사용
    
    ```java
    class Parent{}
    class Child extends Parent{}
    
    public class InstanceofTest {
    
        public static void main(String[] args){
    
            Parent parent = new Parent();
            Child child = new Child();
    
            System.out.println( parent instanceof Parent );  // true
            System.out.println( child instanceof Parent );   // true
            System.out.println( parent instanceof Child );   // false
            System.out.println( child instanceof Child );   // true
        }
    
    }
    ```
    
- 혹은 타입 체킹을 할 때 if에서 사용 가능할 것 같다.
    
    ```java
    if (a instanceof Integer) {
                System.out.println(true);
            }
    ```
    
- **하지만 부모 객체를 확인하기위해 instanceof를 사용하는 것은 객체지향적 관점에서 객체의 캡슐화, OCP(Open-Closed Principle)에 위배되기 때문에 사용을 지양하는게 좋다.**

### assignment(=) operator

대입 연산자: = 를 이용해 오른쪽 피연산자값을 저장할때 사용한다.

복합 대입 연산자: op= 형태로 op는 오퍼레이션, 즉 연산자와 대입 연산자를 붙여서 사용함을 말한다. 

### 화살표(->) 연산자

- Java8 버전 이상부터 추가된 연산자
- 람다 표현식(익명함수)과 함께 사용된다.

### 3항 연산자

### 연산자 우선 순위

### (선택) Java 13. switch 연산자
